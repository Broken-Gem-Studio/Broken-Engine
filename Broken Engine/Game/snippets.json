{
    "ActivateParticlesEmission": {
        "body": "ActivateParticlesEmission($0gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "ActivateParticlesEmission",
        "scope": "Particles"
    },
    "AddForce": {
        "body": "AddForce($0forceX, $1forceY, $2forceZ, $3force_mode, $4gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "AddForce",
        "scope": "Physics"
    },
    "AddTorque": {
        "body": "AddTorque($0forceX, $1forceY, $2forceZ, $3force_mode, $4gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "AddTorque",
        "scope": "Physics"
    },
    "AllAreas": {
        "body": "AllAreas()",
        "description": "Scripting.Navigation \\\nDescription not available",
        "prefix": "AllAreas",
        "scope": "Navigation"
    },
    "CalculatePath": {
        "body": "CalculatePath($0origin_x, $1origin_y, $2origin_z, $3dest_x, $4dest_y, $5dest_z, $6areaMask)",
        "description": "Scripting.Navigation \\\nDescription not available",
        "prefix": "CalculatePath",
        "scope": "Navigation"
    },
    "CompareDoubles": {
        "body": "CompareDoubles($0double_a, $1double_b)",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "CompareDoubles",
        "scope": "System"
    },
    "CompareFloats": {
        "body": "CompareFloats($0float_a, $1float_b)",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "CompareFloats",
        "scope": "System"
    },
    "CurrentAnimationEnded": {
        "body": "CurrentAnimationEnded($0gameObject_UID)",
        "description": "Scripting.Animations \\\nDescription not available",
        "prefix": "CurrentAnimationEnded",
        "scope": "Animations"
    },
    "DT": {
        "body": "DT()",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "DT",
        "scope": "System"
    },
    "DeactivateParticlesEmission": {
        "body": "DeactivateParticlesEmission($0gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "DeactivateParticlesEmission",
        "scope": "Particles"
    },
    "DestroyGameObject": {
        "body": "DestroyGameObject($0gameObject_UID)",
        "description": "Scripting.GameObject \\\nDeletes the gameObject with the passedUID.",
        "prefix": "DestroyGameObject",
        "scope": "GameObject"
    },
    "FindGameObject": {
        "body": "FindGameObject($0gameobject_name)",
        "description": "Scripting.GameObject \\\nReturns the UID of the GameObject if it is found in the scene. This function searches using strings, only recomended to be called on Awake or Start since it consumes a lot of resources.",
        "prefix": "FindGameObject",
        "scope": "GameObject"
    },
    "GameTime": {
        "body": "GameTime()",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "GameTime",
        "scope": "System"
    },
    "GetAngularVelocity": {
        "body": "GetAngularVelocity($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "GetAngularVelocity",
        "scope": "Physics"
    },
    "GetAreaCost": {
        "body": "GetAreaCost($0areaIndex)",
        "description": "Scripting.Navigation \\\nDescription not available",
        "prefix": "GetAreaCost",
        "scope": "Navigation"
    },
    "GetAreaFromName": {
        "body": "GetAreaFromName($0name)",
        "description": "Scripting.Navigation \\\nDescription not available",
        "prefix": "GetAreaFromName",
        "scope": "Navigation"
    },
    "GetAxisRealValue": {
        "body": "GetAxisRealValue($0player_num, $1joy_axis)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "GetAxisRealValue",
        "scope": "Input"
    },
    "GetAxisState": {
        "body": "GetAxisState($0state_name)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "GetAxisState",
        "scope": "Input"
    },
    "GetAxisValue": {
        "body": "GetAxisValue($0player_num, $1joy_axis, $2threshold)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "GetAxisValue",
        "scope": "Input"
    },
    "GetCharacterPosition": {
        "body": "GetCharacterPosition($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "GetCharacterPosition",
        "scope": "Physics"
    },
    "GetCharacterUpDirection": {
        "body": "GetCharacterUpDirection($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "GetCharacterUpDirection",
        "scope": "Physics"
    },
    "GetComponent": {
        "body": "GetComponent($0component_name, $1gameObject_UID)",
        "description": "Scripting.GameObject \\\nDescription not available",
        "prefix": "GetComponent",
        "scope": "GameObject"
    },
    "GetControllerAxis": {
        "body": "GetControllerAxis($0axis_name)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "GetControllerAxis",
        "scope": "Input"
    },
    "GetControllerButton": {
        "body": "GetControllerButton($0button)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "GetControllerButton",
        "scope": "Input"
    },
    "GetDebuggingPath": {
        "body": "GetDebuggingPath()",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "GetDebuggingPath",
        "scope": "System"
    },
    "GetFrustumPlanesIntersection": {
        "body": "GetFrustumPlanesIntersection($0x, $1y, $2z, $3FOV_ratio)",
        "description": "Scripting.Camera \\\nDescription not available",
        "prefix": "GetFrustumPlanesIntersection",
        "scope": "Camera"
    },
    "GetGameObjectParent": {
        "body": "GetGameObjectParent($0gameObject_UID)",
        "description": "Scripting.GameObject \\\nDescription not available",
        "prefix": "GetGameObjectParent",
        "scope": "GameObject"
    },
    "GetGamepadButtonState": {
        "body": "GetGamepadButtonState($0state)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "GetGamepadButtonState",
        "scope": "Input"
    },
    "GetLayerByID": {
        "body": "GetLayerByID($0UID)",
        "description": "Scripting.GameObject \\\nDescription not available",
        "prefix": "GetLayerByID",
        "scope": "GameObject"
    },
    "GetLinearVelocity": {
        "body": "GetLinearVelocity($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "GetLinearVelocity",
        "scope": "Physics"
    },
    "GetMass": {
        "body": "GetMass($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "GetMass",
        "scope": "Physics"
    },
    "GetMouseButton": {
        "body": "GetMouseButton($0button)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "GetMouseButton",
        "scope": "Input"
    },
    "GetMyLayer": {
        "body": "GetMyLayer()",
        "description": "Scripting.GameObject \\\nDescription not available",
        "prefix": "GetMyLayer",
        "scope": "GameObject"
    },
    "GetMyUID": {
        "body": "GetMyUID()",
        "description": "Scripting.GameObject \\\nReturns the UID of the gameObject that contains the script and that currently running the Awake, Start or Update functions.",
        "prefix": "GetMyUID",
        "scope": "GameObject"
    },
    "GetParent": {
        "body": "GetParent()",
        "description": "Scripting.GameObject \\\nDescription not available",
        "prefix": "GetParent",
        "scope": "GameObject"
    },
    "GetPosition": {
        "body": "GetPosition($0gameObject_UID)",
        "description": "Scripting.Transform \\\nDescription not available",
        "prefix": "GetPosition",
        "scope": "Transform"
    },
    "GetPositionInFrustum": {
        "body": "GetPositionInFrustum($0x, $1y, $2z, $3FOV_ratio1, $4FOV_ratio2)",
        "description": "Scripting.Camera \\\nDescription not available",
        "prefix": "GetPositionInFrustum",
        "scope": "Camera"
    },
    "GetRotation": {
        "body": "GetRotation($0gameObject_UID)",
        "description": "Scripting.Transform \\\nDescription not available",
        "prefix": "GetRotation",
        "scope": "Transform"
    },
    "GetScript": {
        "body": "GetScript()",
        "description": "Scripting.GameObject \\\nReturns a reference to another script. The script returned is the one placed inside the gameObject with the UID you pass. ",
        "prefix": "GetScript",
        "scope": "GameObject"
    },
    "Instantiate": {
        "body": "Instantiate($0resource_UID, $1x, $2y, $3z, $4rot_x, $5rot_y, $6rot_z)",
        "description": "Scripting.Scene.lua \\\nDescription not available",
        "prefix": "Instantiate",
        "scope": "Scene.lua"
    },
    "IsGamepadButton": {
        "body": "IsGamepadButton($0player_num, $1button, $2button_state)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "IsGamepadButton",
        "scope": "Input"
    },
    "IsJoystickAxis": {
        "body": "IsJoystickAxis($0player_num, $1joy_axis, $2axis_state)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "IsJoystickAxis",
        "scope": "Input"
    },
    "IsTriggerState": {
        "body": "IsTriggerState($0player_num, $1trigger, $2button_state)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "IsTriggerState",
        "scope": "Input"
    },
    "KeyDown": {
        "body": "KeyDown($0key)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "KeyDown",
        "scope": "Input"
    },
    "KeyIdle": {
        "body": "KeyIdle($0key)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "KeyIdle",
        "scope": "Input"
    },
    "KeyRepeat": {
        "body": "KeyRepeat($0key)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "KeyRepeat",
        "scope": "Input"
    },
    "KeyUp": {
        "body": "KeyUp($0key)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "KeyUp",
        "scope": "Input"
    },
    "LOG": {
        "body": "LOG($0string)",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "LOG",
        "scope": "System"
    },
    "LoadScene": {
        "body": "LoadScene($0scene_UID)",
        "description": "Scripting.Scene.lua \\\nDescription not available",
        "prefix": "LoadScene",
        "scope": "Scene.lua"
    },
    "LookAt": {
        "body": "LookAt($0spotX, $1spotY, $2spotZ, $3gameObject_UID)",
        "description": "Scripting.Transform \\\nDescription not available",
        "prefix": "LookAt",
        "scope": "Transform"
    },
    "MakeElementInvisible": {
        "body": "MakeElementInvisible($0comp_type, $1gameObject_UID)",
        "description": "Scripting.UserInterface \\\nDescription not available",
        "prefix": "MakeElementInvisible",
        "scope": "UserInterface"
    },
    "MakeElementVisible": {
        "body": "MakeElementVisible($0comp_type, $1gameObject_UID)",
        "description": "Scripting.UserInterface \\\nDescription not available",
        "prefix": "MakeElementVisible",
        "scope": "UserInterface"
    },
    "MouseButtonDown": {
        "body": "MouseButtonDown($0button)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "MouseButtonDown",
        "scope": "Input"
    },
    "MouseButtonIdle": {
        "body": "MouseButtonIdle($0button)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "MouseButtonIdle",
        "scope": "Input"
    },
    "MouseButtonRepeat": {
        "body": "MouseButtonRepeat($0button)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "MouseButtonRepeat",
        "scope": "Input"
    },
    "MouseButtonState": {
        "body": "MouseButtonState($0button)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "MouseButtonState",
        "scope": "Input"
    },
    "MouseButtonUp": {
        "body": "MouseButtonUp($0button)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "MouseButtonUp",
        "scope": "Input"
    },
    "Move": {
        "body": "Move($0vel_x, $1vel_z, $2gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "Move",
        "scope": "Physics"
    },
    "OnCollisionEnter": {
        "body": "OnCollisionEnter($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "OnCollisionEnter",
        "scope": "Physics"
    },
    "OnCollisionExit": {
        "body": "OnCollisionExit($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "OnCollisionExit",
        "scope": "Physics"
    },
    "OnCollisionStay": {
        "body": "OnCollisionStay($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "OnCollisionStay",
        "scope": "Physics"
    },
    "OnTriggerEnter": {
        "body": "OnTriggerEnter($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "OnTriggerEnter",
        "scope": "Physics"
    },
    "OnTriggerExit": {
        "body": "OnTriggerExit($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "OnTriggerExit",
        "scope": "Physics"
    },
    "OnTriggerStay": {
        "body": "OnTriggerStay($0gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "OnTriggerStay",
        "scope": "Physics"
    },
    "OverlapSphere": {
        "body": "OverlapSphere($0pos_x, $1pos_y, $2pos_z, $3radius, $4layer)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "OverlapSphere",
        "scope": "Physics"
    },
    "PauseAudioEvent": {
        "body": "PauseAudioEvent($0event)",
        "description": "Scripting.Audio \\\nDescription not available",
        "prefix": "PauseAudioEvent",
        "scope": "Audio"
    },
    "PauseGame": {
        "body": "PauseGame()",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "PauseGame",
        "scope": "System"
    },
    "PlayAnimation": {
        "body": "PlayAnimation($0name, $1speed, $2gameObject_UID)",
        "description": "Scripting.Animations \\\nDescription not available",
        "prefix": "PlayAnimation",
        "scope": "Animations"
    },
    "PlayAudioEvent": {
        "body": "PlayAudioEvent($0event)",
        "description": "Scripting.Audio \\\nDescription not available",
        "prefix": "PlayAudioEvent",
        "scope": "Audio"
    },
    "PlayParticleEmitter": {
        "body": "PlayParticleEmitter($0gameObject_UID, $1gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "PlayParticleEmitter",
        "scope": "Particles"
    },
    "QuitGame": {
        "body": "QuitGame()",
        "description": "Scripting.Scene.lua \\\nDescription not available",
        "prefix": "QuitGame",
        "scope": "Scene.lua"
    },
    "RandomNumber": {
        "body": "RandomNumber()",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "RandomNumber",
        "scope": "System"
    },
    "RandomNumberInRange": {
        "body": "RandomNumberInRange($0min, $1max)",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "RandomNumberInRange",
        "scope": "System"
    },
    "RandomNumberList": {
        "body": "RandomNumberList($0listSize, $1min, $2max)",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "RandomNumberList",
        "scope": "System"
    },
    "Raycast": {
        "body": "Raycast($0origin_x, $1origin_y, $2origin_z, $3direction_x, $4direction_y, $5direction_z_z, $6maxDistance, $7layer, $8bool_hitTriggers)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "Raycast",
        "scope": "Physics"
    },
    "RealDT": {
        "body": "RealDT()",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "RealDT",
        "scope": "System"
    },
    "ResumeAudioEvent": {
        "body": "ResumeAudioEvent($0event)",
        "description": "Scripting.Audio \\\nDescription not available",
        "prefix": "ResumeAudioEvent",
        "scope": "Audio"
    },
    "ResumeGame": {
        "body": "ResumeGame()",
        "description": "Scripting.System \\\nDescription not available",
        "prefix": "ResumeGame",
        "scope": "System"
    },
    "RotateObject": {
        "body": "RotateObject($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Transform \\\nDescription not available",
        "prefix": "RotateObject",
        "scope": "Transform"
    },
    "ScreenToWorld": {
        "body": "ScreenToWorld($0x, $1y, $2distance)",
        "description": "Scripting.Camera \\\nDescription not available",
        "prefix": "ScreenToWorld",
        "scope": "Camera"
    },
    "SetActiveGameObject": {
        "body": "SetActiveGameObject($0bool_active, $1gameObject_UID)",
        "description": "Scripting.GameObject \\\nDescription not available",
        "prefix": "SetActiveGameObject",
        "scope": "GameObject"
    },
    "SetAngularVelocity": {
        "body": "SetAngularVelocity($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "SetAngularVelocity",
        "scope": "Physics"
    },
    "SetAnimationSpeed": {
        "body": "SetAnimationSpeed($0name, $1speed, $2gameObject_UID)",
        "description": "Scripting.Animations \\\nDescription not available",
        "prefix": "SetAnimationSpeed",
        "scope": "Animations"
    },
    "SetAreaCost": {
        "body": "SetAreaCost($0areaIndex)",
        "description": "Scripting.Navigation \\\nDescription not available",
        "prefix": "SetAreaCost",
        "scope": "Navigation"
    },
    "SetBlendTime": {
        "body": "SetBlendTime($0blend_value, $1gameObject_UID)",
        "description": "Scripting.Animations \\\nDescription not available",
        "prefix": "SetBlendTime",
        "scope": "Animations"
    },
    "SetCharacterPosition": {
        "body": "SetCharacterPosition($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "SetCharacterPosition",
        "scope": "Physics"
    },
    "SetCharacterUpDirection": {
        "body": "SetCharacterUpDirection($0rot_x, $1rot_y, $2rot_z, $3gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "SetCharacterUpDirection",
        "scope": "Physics"
    },
    "SetCurrentAnimationSpeed": {
        "body": "SetCurrentAnimationSpeed($0speed, $1gameObject_UID)",
        "description": "Scripting.Animations \\\nDescription not available",
        "prefix": "SetCurrentAnimationSpeed",
        "scope": "Animations"
    },
    "SetEmissionRate": {
        "body": "SetEmissionRate($0ms, $1gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetEmissionRate",
        "scope": "Particles"
    },
    "SetExternalAcceleration": {
        "body": "SetExternalAcceleration($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetExternalAcceleration",
        "scope": "Particles"
    },
    "SetKinematic": {
        "body": "SetKinematic($0bool_enable, $1gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "SetKinematic",
        "scope": "Physics"
    },
    "SetLinearVelocity": {
        "body": "SetLinearVelocity($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "SetLinearVelocity",
        "scope": "Physics"
    },
    "SetMass": {
        "body": "SetMass($0mass, $1gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "SetMass",
        "scope": "Physics"
    },
    "SetObjectRotation": {
        "body": "SetObjectRotation($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Transform \\\nDescription not available",
        "prefix": "SetObjectRotation",
        "scope": "Transform"
    },
    "SetOffsetPosition": {
        "body": "SetOffsetPosition($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetOffsetPosition",
        "scope": "Particles"
    },
    "SetOffsetRotation": {
        "body": "SetOffsetRotation($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetOffsetRotation",
        "scope": "Particles"
    },
    "SetParticlesDuration": {
        "body": "SetParticlesDuration($0duration, $1gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetParticlesDuration",
        "scope": "Particles"
    },
    "SetParticlesLifeTime": {
        "body": "SetParticlesLifeTime($0ms, $1gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetParticlesLifeTime",
        "scope": "Particles"
    },
    "SetParticlesLooping": {
        "body": "SetParticlesLooping($0bool_active, $1gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetParticlesLooping",
        "scope": "Particles"
    },
    "SetParticlesPerCreation": {
        "body": "SetParticlesPerCreation($0particles_amount, $1gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetParticlesPerCreation",
        "scope": "Particles"
    },
    "SetParticlesScale": {
        "body": "SetParticlesScale($0x, $1y, $2gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetParticlesScale",
        "scope": "Particles"
    },
    "SetParticlesVelocity": {
        "body": "SetParticlesVelocity($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetParticlesVelocity",
        "scope": "Particles"
    },
    "SetPosition": {
        "body": "SetPosition($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Transform \\\nDescription not available",
        "prefix": "SetPosition",
        "scope": "Transform"
    },
    "SetRandomParticlesScale": {
        "body": "SetRandomParticlesScale($0randomFactor, $1gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetRandomParticlesScale",
        "scope": "Particles"
    },
    "SetRandomParticlesVelocity": {
        "body": "SetRandomParticlesVelocity($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "SetRandomParticlesVelocity",
        "scope": "Particles"
    },
    "SetText": {
        "body": "SetText($0UI_Text, $1gameObject_UID)",
        "description": "Scripting.UserInterface \\\nDescription not available",
        "prefix": "SetText",
        "scope": "UserInterface"
    },
    "SetTextAndNumber": {
        "body": "SetTextAndNumber($0UI_text, $1number, $2gameObject_UID)",
        "description": "Scripting.UserInterface \\\nDescription not available",
        "prefix": "SetTextAndNumber",
        "scope": "UserInterface"
    },
    "SetTextNumber": {
        "body": "SetTextNumber($0number, $1gameObject_UID)",
        "description": "Scripting.UserInterface \\\nDescription not available",
        "prefix": "SetTextNumber",
        "scope": "UserInterface"
    },
    "SetUIBarPercentage": {
        "body": "SetUIBarPercentage($0percentage, $1gameObject_UID)",
        "description": "Scripting.UserInterface \\\nDescription not available",
        "prefix": "SetUIBarPercentage",
        "scope": "UserInterface"
    },
    "SetUICircularBarPercentage": {
        "body": "SetUICircularBarPercentage($0percentage, $1gameObject_UID)",
        "description": "Scripting.UserInterface \\\nDescription not available",
        "prefix": "SetUICircularBarPercentage",
        "scope": "UserInterface"
    },
    "SetVolume": {
        "body": "SetVolume($0volume)",
        "description": "Scripting.Audio \\\nDescription not available",
        "prefix": "SetVolume",
        "scope": "Audio"
    },
    "ShakeController": {
        "body": "ShakeController($0player_num, $1intensity, $2milliseconds)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "ShakeController",
        "scope": "Input"
    },
    "StopAudioEvent": {
        "body": "StopAudioEvent($0event)",
        "description": "Scripting.Audio \\\nDescription not available",
        "prefix": "StopAudioEvent",
        "scope": "Audio"
    },
    "StopControllerShake": {
        "body": "StopControllerShake($0player_num)",
        "description": "Scripting.Input \\\nDescription not available",
        "prefix": "StopControllerShake",
        "scope": "Input"
    },
    "StopParticleEmitter": {
        "body": "StopParticleEmitter()",
        "description": "Scripting.Particles \\\nDescription not available",
        "prefix": "StopParticleEmitter",
        "scope": "Particles"
    },
    "Translate": {
        "body": "Translate($0x, $1y, $2z, $3gameObject_UID)",
        "description": "Scripting.Transform \\\nDescription not available",
        "prefix": "Translate",
        "scope": "Transform"
    },
    "UseGravity": {
        "body": "UseGravity($0bool_enable, $1gameObject_UID)",
        "description": "Scripting.Physics \\\nDescription not available",
        "prefix": "UseGravity",
        "scope": "Physics"
    },
    "WorldToScreen": {
        "body": "WorldToScreen($0x, $1y, $2z)",
        "description": "Scripting.Camera \\\nDescription not available",
        "prefix": "WorldToScreen",
        "scope": "Camera"
    }
}